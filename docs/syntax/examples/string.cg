use string; // Tells the compiler to use module 'string'

type string = string<8>;	 	// Makes that, in the generic context string<*>, string<8> is default
					// string<8> is default in the language anyway, but this line in shown here as an example

// While reading the above line you could think about C's typedef.
// Using 'typedef' for that is dispute resolution.
// I don't plan to allow doing it with the 'typedef' to not mix styles.
// I recommend to use type for everything in C*.


int main()
{
	string 		str_utf8 = "UTF-8 string: zażółć gęślą jaźń";
	string<16> 	str_utf16 = str_utf8; 				// Conversion between utf-8 and utf-16 will happen here

	//string<16>	str_utf16 = string<16>::from(str_utf8); 	// Will do the same thing that above

	string<16>	str_utf16_2 = "UTF-16 string!"			// Will create utf-16 string

	// The compiler will create the UTF-16 variation of this string, pack it to the .text section and
	// this variable will point to that data.
	//
	const wchar *static_string_16 = "Hello, world";

	// Will do the same that above, but this allows you to assign an UTF-16 static string to the char *
	// pointer.
	//
	const char *static_string2_16 = w"Hello, world";

	// Are absolutely the same, but UTF-32
	//
	const lchar *static_string_32 = "Hello, world";
	const char *static_string2_32 = l"Hello, world";
	
	// UTF-8 also has its optional prefix
	//
	const char *static_string_8 = s"Hello, world";

	// w means wide
	// l means long
	// s means short
	
	// C has a big problem with the DOS filesystem, where pathes use '\' instead of UNIX's '/' and here
	// the problem begins, because '\' is used in "" as an escape.
	// In C you need to do: "C:\\some_dir\\file".
	// The problem gets on weight if you want to create a regex literal.
	// A regex: '^C:\\some_dir\\file$' would have to be coded as: '^C:\\\\some_dir\\\\file$'.
	// It isn't pretty, ok?
	// C* offers one cool thing: the WYSIWYG (What You See Is What You Get) mechanism, the `` quotes.
	//
	const char *win_path = `C:\some_dir\file`;
	const char *regex = `^C:\\some_dir\\file$`;

	// Isn't this nice?
	
	// String prefixes can also be used for WYSIWYG:
	const char *im_long = l`Wide Doggo`;

	// When it comes to multi-line strings, you can do it in two ways:
	const char *ml1 = "abc
d
e
f"
	// ^ This will create a string with 'abc\nd\ne\nf' as the content
	// Maybe you wish to align your lines.
	// To do it, there exists a 'A' string prefix.
	// 'A' makes that every line starts after the last whitespace.
	// Example:
	const char *ml2 = A"a
					    b
					    c
					    d
					    e";
	// And this string is equal to "a\nb\nc\nd".
	// You can also without any problem specify the string's char width with any of w,l,s prefixes.
	// It is not said where it should be placed. May be after or before the 'A' specifier.
	// It's good to mention that in C* the `char width prefixes` are lower-case.
	// Each other prefixes are upper-case.
	const char *ml4 = Al"a
					     b
						 c
						 d";
	// Will work as you may guess.
	
	// To include a leading whitespace in a line when 'A' prefix is used you have to put '\' before a space.
	// Example:
	const char *ml5 = Al"a
		                \    b
						\    c"
						
	// The '\' character at the end of the string line means to concatenate
	// the lower line with the current one without putting '\n' between them.
	const char *ml6 = A"a \
					    b
					    c
					    d";

	// Trailing whitespace are ignored in multiline strings.
	// To include it you have to put `\` before a whitespace.
	const char *ml7 = A"a
						b\ \ \
						c"

	// Warning:
	//   You can't use `\` in `` (absolute) strings!
	//   It is treated absolutely so like `\\` in "" strings.
}


